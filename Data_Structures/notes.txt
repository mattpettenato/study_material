Data Structures 

What are Data Structures?
- a collection of data values. relationships amongst them, functions and operations that can be applied to the data
-  


3 key terms

Complexity Analysis
- the process of determining how efficient an algorithm is. 
- Complexity analysis usually involves finding both the time complexity and the space complexity of an algorithm.
- Complexity analysis is effectively how 'good' an algorithm is and whether it's 'better' than another one.

Time Complexity
- A measure of how fast an algorithm runs, the time complexity is a central concept in the field of algorithms and in coding interviews.
- It's expressed using Big O notation

Space Complexity
- A measure of how much auxiliary memory an algorithm takes up
- Space complexity is a central concept in the field of algorithms and in coding interviews.
- It's expressed using Big O notation

What makes one solution better than another? Complexity

Memory
- The bedrock of all data Structures
- Memory is the underlying concept that you absolutely need to understand

bit - shirt of binary digit - fundamental unit in CS that represents a state with one of two values (0 and 1) - any data stored in a computer is represented in bits

Byte - group of 8 bits. EX: 01101000 is a Byte
- A single byte can represent up to 256 data valyes (2^8)
- Since a binary number is a number expressed with only two symbols, like 0 and 1, a byte can effectively represent all of the numbers between 0 and 255, inclusive, in binary format
EX:
# 1 : 00000001
# 2 : 00000010
# 3 : 00000011
# 4 : 00000100

Fixed-Width Integer - an integer represented by a fixed amount of bits. EX: 32-bit integer represented by 32 bits (4) bytes, and a 64 bit integer (8 bytes)
- constant number of bits

Memory - foundational layer of computing, where all data is stored.
- data stored in memory is stored in bytes and bits
- Bytes in memory can "point" to other bytes in memory, so as to store reference to other data.
- The amount of memory that a machine has is bounded, making it valuable to limit how much memory an algorithm takes up.
- Accessing  byte or a fixed number of bytes (like 4 bytes or 8 bytes in the case of 32-but and 64-but integers) is an elementary operation, which can be loosely treated asa single unit of operational work. 

Big O notation
- the speed and memory usage of an algorithm aren't necessarily fixed; they might change depending on the input.
- powerful too' that allows us to generalize the space-time complexity of an algorithm







two sum
function twoNumberSum(array, targetSum) {
	for (i = 0; i < array.length; i++) {
		const firstNum = array[i]
		for (j=i+1; j< array.length; j++){
			const secNum = array[j]
			if (firstNum + secNum === targetSum){
				return [firstNum, secNum]
			}
		}
	}
	return [];
}
exports.twoNumberSum = twoNumberSum;


Contains Duplicate
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Input: nums = [1,2,3,1]
Output: true

Input: nums = [1,2,3,4]
Output: false

var containsDuplicate = function(nums) {
    const hash = {}
		#pushing nums into has
		#check hash for nums
};

Validate subsequence
Given two non-empty arrays of integers, write a function that determines whether the second array is a subsequence of the first one.
sample input:
array = [5, 1, 22, 25, 6, -1, 8,10]
sequence = [1, 6, -1, 10]
same output: true

function isValidSubsequence(array, sequence) {
	let arrIdx = 0;
	let seqIdx = 0;
	while (arrIdx < array.length && seqIdx < seuqnece.length) {
		if (array[arrIdx] === seuqnece[seqIdx]) seqIdx++;
		arrIdx;
	}
	return seqIdx === sequence.length;
}
